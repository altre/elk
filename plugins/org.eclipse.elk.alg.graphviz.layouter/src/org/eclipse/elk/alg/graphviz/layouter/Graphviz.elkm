/*******************************************************************************
 * Copyright (c) 2015 Kiel University and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    spoenemann - initial API and implementation
 *******************************************************************************/
package org.eclipse.elk.alg.graphviz

import org.eclipse.elk.alg.graphviz.dot.transform.NeatoModel
import org.eclipse.elk.alg.graphviz.dot.transform.OverlapMode
import org.eclipse.elk.core.options.Direction
import org.eclipse.elk.core.options.EdgeRouting
import org.eclipse.elk.core.util.ExclusiveBounds

bundle {
	label "Graphviz"
	metadataClass layouter.GraphvizMetaDataProvider
	idPrefix org.eclipse.elk.graphviz
}

algorithm dot(GraphvizLayoutProvider#DOT) {
	label "Dot"
	description
		"Layered drawings of directed graphs. The algorithm aims edges in the same direction (top
		to bottom, or left to right) and then attempts to avoid edge crossings and reduce edge
		length. Edges are routed as spline curves and are thus drawn very smoothly. This algorithm
		is very suitable for state machine and activity diagrams, where the direction of edges has
		an important role."
	metadataClass layouter.DotOptions
	category org.eclipse.elk.layered
	features self_loops, multi_edges, edge_labels, compound, clusters
	preview  images/dot.png
	supports org.eclipse.elk.direction = Direction.DOWN
	supports org.eclipse.elk.spacing.node = 20
	supports org.eclipse.elk.spacing.border = 10
	supports org.eclipse.elk.spacing.^label
	supports org.eclipse.elk.nodeSize.constraints
	supports org.eclipse.elk.nodeSize.options
	supports org.eclipse.elk.edgeRouting = EdgeRouting.SPLINES
	supports org.eclipse.elk.debugMode
	supports org.eclipse.elk.hierarchyHandling
	supports iterationsFactor = 1
	supports concentrate
	supports labelDistance
	supports labelAngle
	supports layerSpacingFactor
	supports adaptPortPositions
}

algorithm neato(GraphvizLayoutProvider#NEATO) {
	label "Neato"
	description
		"Spring model layouts. Neato attempts to minimize a global energy function, which is
		equivalent to statistical multi-dimensional scaling. The solution is achieved using
		stress majorization, though the older Kamada-Kawai algorithm, using steepest descent, is
		also available."
    metadataClass layouter.NeatoOptions
	category org.eclipse.elk.force
	features self_loops, multi_edges, edge_labels
	preview  images/neato.png
	supports org.eclipse.elk.spacing.node = 40
	supports org.eclipse.elk.spacing.border = 10
	supports org.eclipse.elk.spacing.^label
	supports org.eclipse.elk.nodeSize.constraints
	supports org.eclipse.elk.nodeSize.options
	supports org.eclipse.elk.randomSeed = 1
	supports org.eclipse.elk.interactive
	supports org.eclipse.elk.edgeRouting = EdgeRouting.SPLINES
	supports org.eclipse.elk.debugMode
	supports org.eclipse.elk.separateConnectedComponents = false
	supports concentrate
	supports epsilon = 0.0001f
	supports labelDistance
	supports labelAngle
	supports maxiter = 200
	supports neatoModel
	supports overlapMode
	supports adaptPortPositions
}

algorithm fdp(GraphvizLayoutProvider#FDP) {
	label "FDP"
	description
		"Spring model layouts similar to those of Neato, but does this by reducing forces rather
		than working with energy. Fdp implements the Fruchterman-Reingold heuristic including a
		multigrid solver that handles larger graphs and clustered undirected graphs."
    metadataClass layouter.FdpOptions
	category org.eclipse.elk.force
	features self_loops, multi_edges, edge_labels, clusters
	preview  images/fdp.png
	supports org.eclipse.elk.spacing.node = 40
	supports org.eclipse.elk.spacing.border = 10
	supports org.eclipse.elk.spacing.^label
	supports org.eclipse.elk.nodeSize.constraints
	supports org.eclipse.elk.nodeSize.options
	supports org.eclipse.elk.interactive
	supports org.eclipse.elk.edgeRouting = EdgeRouting.SPLINES
	supports org.eclipse.elk.debugMode
	supports org.eclipse.elk.hierarchyHandling
	supports org.eclipse.elk.separateConnectedComponents = false
	supports concentrate
	supports labelDistance
	supports labelAngle
	supports maxiter = 600
	supports overlapMode
	supports adaptPortPositions
}

algorithm twopi(GraphvizLayoutProvider#TWOPI) {
	label "Twopi"
	description
		"Radial layouts, after Wills '97. The nodes are placed on concentric circles depending on
		their distance from a given root node. The algorithm is designed to handle not only small
		graphs, but also very large ones."
    metadataClass layouter.TwopiOptions
	category org.eclipse.elk.tree
	features self_loops, multi_edges, edge_labels
	preview  images/twopi.png
	supports org.eclipse.elk.spacing.node = 60
	supports org.eclipse.elk.spacing.border = 10
	supports org.eclipse.elk.spacing.^label
	supports org.eclipse.elk.nodeSize.constraints
	supports org.eclipse.elk.nodeSize.options
	supports org.eclipse.elk.edgeRouting = EdgeRouting.SPLINES
	supports org.eclipse.elk.debugMode
	supports concentrate
	supports labelDistance
	supports labelAngle
	supports overlapMode
	supports adaptPortPositions
}

algorithm circo(GraphvizLayoutProvider#CIRCO) {
	label "Circo"
	description
		"Circular layout, after Six and Tollis '99, Kaufmann and Wiese '02. The algorithm finds
		biconnected components and arranges each component in a circle, trying to minimize the
		number of crossings inside the circle. This is suitable for certain diagrams of multiple
		cyclic structures such as certain telecommunications networks."
    metadataClass layouter.CircoOptions
	category org.eclipse.elk.circle
	features self_loops, multi_edges, edge_labels
	preview  images/circo.png
	supports org.eclipse.elk.spacing.node = 40
	supports org.eclipse.elk.spacing.border = 10
	supports org.eclipse.elk.spacing.^label
	supports org.eclipse.elk.nodeSize.constraints
	supports org.eclipse.elk.nodeSize.options
	supports org.eclipse.elk.edgeRouting = EdgeRouting.SPLINES
	supports org.eclipse.elk.debugMode
	supports org.eclipse.elk.separateConnectedComponents = false
	supports concentrate
	supports labelDistance
	supports labelAngle
	supports overlapMode
	supports adaptPortPositions
}


//------- LAYOUT OPTIONS

advanced option adaptPortPositions: boolean {
	label "Adapt Port Positions"
	description "Whether ports should be moved to the point where edges cross the node's bounds."
	default = true
	targets parents
}

advanced option concentrate: boolean {
	label "Concentrate Edges"
	description
		"Merges multiedges into a single edge and causes partially parallel edges to share part of
		their paths."
	default = false
	targets parents
}

option epsilon: float {
	label "Epsilon"
	description
		"Terminating condition. If the length squared of all energy gradients are less than
		epsilon, the algorithm stops."
    lowerBound = ExclusiveBounds.greaterThan(0)
	targets parents
}

advanced option iterationsFactor: float {
	label "Iterations Factor"
	description
		"Multiplicative scale factor for the maximal number of iterations used during crossing
		minimization, node ranking, and node positioning."
    lowerBound = ExclusiveBounds.greaterThan(0)
	targets parents
}

option labelAngle: float {
	label "Label Angle"
	description "Angle between head / tail positioned edge labels and the corresponding edge."
	default = -25
	targets edges
}

option labelDistance: float {
	label "Label Distance"
	description "Distance of head / tail positioned edge labels to the source or target node."
	default = 1
    lowerBound = 0f
	targets edges
}

option layerSpacingFactor: float {
	label "Layer Spacing Factor"
	description "Factor for the spacing of different layers (ranks)."
	default = 1
    lowerBound = ExclusiveBounds.greaterThan(0)
	targets parents
}

advanced option maxiter: int {
	label "Max. Iterations"
	description "The maximum number of iterations."
    lowerBound = 1
	targets parents
}

advanced option neatoModel: NeatoModel {
	label "Distance Model"
	description "Specifies how the distance matrix is computed for the input graph."
	default = NeatoModel.SHORTPATH
	targets parents
}

option overlapMode: OverlapMode {
	label "Overlap Removal"
	description "Determines if and how node overlaps should be removed."
	default = OverlapMode.PRISM
	targets parents
}
