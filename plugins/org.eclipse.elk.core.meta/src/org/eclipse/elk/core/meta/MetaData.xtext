/*******************************************************************************
 * Copyright (c) 2016 Kiel University and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Kiel University - initial API and implementation
 *******************************************************************************/
grammar org.eclipse.elk.core.meta.MetaData with org.eclipse.xtext.xbase.Xbase

generate metaData "http://www.eclipse.org/elk/core/meta/MetaData"

MdModel:
    (
        'package' name=QualifiedName
        importSection=XImportSection?
    	bundle=MdBundle
    )?;

MdBundle:
    {MdBundle}
    (
        'bundle' '{'
            (
                ('label' label=STRING)?
                & ('class' targetClass=QualifiedName)?
                & ('documentationFolder' documentationFolder=Path)?
                & ('idPrefix' idPrefix=QualifiedName)?
            )
        '}'
    )?
    members+=MdBundleMember*;

MdBundleMember:
    MdGroupOrProperty | MdAlgorithm | MdCategory;

MdGroupOrProperty:
    MdGroup | MdProperty;

MdGroup:
    'group' name=ID '{'
        children+=MdGroupOrProperty*
    '}';

MdProperty:
    deprecated?='deprecated'?
    (advanced?='advanced' | programmatic?='programmatic' | output?='output' | global?='global')?
    'option' name=ID (':' type=JvmTypeReference)? '{'
        (
            ('label' label=STRING)?
            & ('description' description=STRING)?
            & ('documentation' documentation=STRING)?   // "@docu/priority.md"
            & ('default' '=' defaultValue=XExpression)?
            & ('lowerBound' '=' lowerBound=XExpression)?
            & ('upperBound' '=' upperBound=XExpression)?
            & ('targets' targets+=MdPropertyTargetType (',' targets+=MdPropertyTargetType)*)?
            & ('legacyIds' legacyIds+=QualifiedName (',' legacyIds+=QualifiedName)*)?
        )
        (dependencies+=MdPropertyDependency)*
    '}';

MdPropertyDependency:
    'requires' target=[MdProperty|QualifiedName] ('==' value=XExpression)?;

MdAlgorithm:
    deprecated?='deprecated'?
    'algorithm' name=ID '(' provider=JvmTypeReference ('#' parameter=ID)? ')' '{'
        (
            ('label' label=STRING)?
            & ('description' description=STRING)?
            & ('documentation' documentation=STRING)?
            & ('category' category=[MdCategory|QualifiedName])?
            & ('preview' previewImage=Path)?
            & ('features' supportedFeatures+=MdGraphFeature (',' supportedFeatures+=MdGraphFeature)*)?
        )
        (supportedOptions+=MdPropertySupport)*
    '}';

MdCategory:
    deprecated?='deprecated'?
    'category' name=ID '{'
        (
            ('label' label=STRING)?
            & ('description' description=STRING)?
            & ('documentation' documentation=STRING)?
        )
    '}';

MdPropertySupport:
    'supports' property=[MdProperty|QualifiedName] ('=' value=XExpression duplicated?='duplicated'?)?
    ('documentation' documentation=STRING)?
    ;

Path:
    QualifiedName (('/' | '-') QualifiedName)*;

enum MdPropertyTargetType:
    parents | nodes | edges | ports | labels;

enum MdGraphFeature:
    self_loops | inside_self_loops | multi_edges | edge_labels | ports | compound
    | clusters | disconnected;
